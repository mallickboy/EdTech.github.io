<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script>
        const ROOM_ID = "<%= roomId %>";
        console.log("videoCalling f : ", ROOM_ID);
    </script>
    <script src="https://unpkg.com/peerjs@1.5.2/dist/peerjs.min.js"></script>

    <script src="/socket.io/socket.io.js"></script>

    <title>LIVE CAHT</title>
    <style>
        body{
            /* background: url('https://images.pexels.com/photos/172277/pexels-photo-172277.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1'); */
            background-color:rgba(0, 0, 0, 0.5);
            background-repeat: no-repeat; /* Prevent background image from repeating */
            background-size: cover;
        }
        #video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, 300px);
            grid-auto-rows: 200px;
        }

        video {
            width: 100%;
            height: 80%;
            object-fit: fill;
            border: 1px solid red;
        }
        label{
            text-align: center;
            /* display: none; */
            color: brown;
            size: 50px;
        }
        videoSec{
            border: 1px solid black;
        }
    </style>
</head>

<body>
    <!-- <h1>hhhh</h1> -->
    <div id="video-grid">
    </div>
</body>
<script defer>
    const socket = io('/');
    const videoGrid = document.getElementById('video-grid');
    const peer = new Peer();
    peer.on('open', id => {
        socket.emit('join-room', ROOM_ID, id);
    })
    const myVideo = document.createElement('video');
    const myName = document.createElement('label');
    myVideo.muted = true;
    const allpeers={}
    navigator.mediaDevices.getUserMedia({
        video: true,
        audio: true
    }).then(stream => {
        addVideoStream(myName,myVideo, stream);
        peer.on('call',call=>{
            call.answer(stream);
            const videoADD=document.createElement('video');
            const myName = document.createElement('label');
            call.on('stream',userVideoStream=>{
                addVideoStream(myName,videoADD,userVideoStream);
            })
        })
        socket.on('user-connected', userId => {
            console.log("ejx : ", "user connected ", userId);
            connectToNewUser(userId,stream);
        })
        socket.on('user-disconnected',userId=>{
            console.log("ejs : ","disconnected  ",userId);
            if (allpeers[userId]) {
                allpeers[userId].close();
            }
        })
    })
    // Add event listeners or further socket logic here

    function connectToNewUser(userId,stream) {
        const call=peer.call(userId,stream);
        const video=document.createElement('video');
        const myName = document.createElement('label');
        call.on('stream',userVideoStream=>{
            addVideoStream(myName,video,userVideoStream);
        })
        call.on('close',()=>{
            video.remove();
        })
        allpeers[userId]=call; // linking call to the user id
    }

    function addVideoStream(profile,video, stream) {
        video.srcObject = stream;
        console.log(stream.id)
        const videoSec=document.createElement('videoSec');
        const camera=document.createElement('camera');
        camera.textContent="camera";
        camera.onclick=()=>{
            alert("camera clicked");
            
        }
        const mic=document.createElement('mic');
        mic.textContent="mic"
        video.addEventListener('loadedmetadata', () => {
            video.play();
        })
        profile.textContent="User_name";
        // video.append(profile)
        videoSec.append(video,profile,camera,mic)
        videoGrid.append(videoSec);
    }
</script>

</html>